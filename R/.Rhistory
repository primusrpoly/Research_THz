MyData=read.csv("full_results.csv", header=T,row.names='X',na.strings ="?")
# Summary of the data
summary(df)
Structure of the DataFrame
Summary of the data
# Display the first few rows of the DataFrame
head(df)
getwd(); # verify working directory
Advertising=read.csv("full_Results.csv")
colnames(Advertising)
colnames(Advertising)
summary(Advertising)
colnames(MyData)
MyData = read.csv("full_Results.csv")
colnames(MyData)
summary(MyData)
plot(MyData$PhaseNoise, MyData$CBER)
abline(lm.fit)
#abline(lm.fit)
summary(lm.fit, lwd=3)
lm.fit =lm(MyData$CBER ~ MyData$PhaseNoise + MyData$SymbolRate); summary(lm.fit)
lm3.fit =lm(MyData$CBER ~ MyData$SNR + MyData$SymbolRate); summary(lm3.fit)
lm2.fit =lm(MyData$CBER ~ MyData$PhaseNoise + MyData$SNR); summary(lm2.fit)
lm4.fit =lm(MyData$CBER ~ MyData$PhaseNoise + MyData$SymbolRate + MyData$SNR); summary(lm4.fit)
shape(MyData)
length(MyData)
dim(MyData)
colnames(MyData)
hist(unlist(MyData['CBER']))
hist(unlist(MyData['CBER']), breaks = 50)
hist(unlist(MyData['BER']), breaks = 50)
lm4.fit =lm(MyData$CBER ~ MyData$PhaseNoise + MyData$SymbolRate + MyData$SNR); summary(lm4.fit)
lm4.fit =lm(CBER ~ PhaseNoise + SymbolRate + MSNR, data = MyData); summary(lm4.fit)
lm4.fit =lm(CBER ~ PhaseNoise + SymbolRate + SNR, data = MyData); summary(lm4.fit)
plot(MyData$PhaseNoise, MyData$SymbolRate)
plot(MyData$SNR, MyData$SymbolRate)
plot(MyData$SNR, MyData$PhaseNoise)
# plotting residuals
lm4.fit$residuals
# plotting residuals
plot(x= MyData$CBER, y = lm4.fit$residuals)
plot(MyData$SNR, MyData$CBER)
# plotting residuals
plot(x= MyData$CBER, y = lm4.fit$residuals)
abline(lm4.fit)
# Try non-linear situations
lm5.fit =lm(CBER ~ PhaseNoise + SymbolRate + I(SNR)^2, data = MyData); summary(lm4.fit)
# Try non-linear situations
lm5.fit =lm(CBER ~ PhaseNoise + SymbolRate + I(SNR)^2, data = MyData); summary(lm4.fit)
plot(x= MyData$CBER, y = lm5.fit$residuals)
# Try non-linear situations
lm5.fit =lm(CBER ~ PhaseNoise + SymbolRate + I(SNR^2), data = MyData); summary(lm4.fit)
plot(x= MyData$CBER, y = lm5.fit$residuals)
# Try non-linear situations
lm5.fit =lm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SNR, data = MyData); summary(lm4.fit)
plot(x= MyData$CBER, y = lm5.fit$residuals)
MyData['CBER']
MyData['CBER'] < 0.001
which(MyData['CBER'] < 0.001)
length(which(MyData['CBER'] < 0.001))
MyData[(which(MyData['CBER'] < 0.001)),]
allzeros= MyData[(which(MyData['CBER'] < 0.001)),]
allzeros
hist(unlist(MyData['CBER']), breaks = 100)
hist(unlist(MyData['CBER']), breaks = 10)
hist(unlist(MyData['CBER']), breaks = 100)
hist(unlist(MyData['CBER']), breaks = 1000)
# next step, randomly eliminate 80% of your zeros
allidiceszero= which(MyData['CBER'] <= 0.0))
# next step, randomly eliminate 80% of your zeros
allidiceszero= which(MyData['CBER'] <= 0.0)
length(allidiceszero)
plot(MyData$SNR, MyData$SymbolRate, MyData$PhaseNoise)
plot(MyData$SymbolRate, MyData$PhaseNoise)
plot(MyData$SNR, MyData$SymbolRate)
# next step, randomly eliminate 80% of your zeros
allidiceszero= which(MyData['CBER'] <= 0.0)
length(allidiceszero)
# next step, randomly eliminate 80% of your zeros
allindiceszero= which(MyData['CBER'] <= 0.0)
length(allidiceszero)
# randomselection of allindicieas
num_zeros_to_remove = floor(0.80 * length(all_indices_zero))
# randomselection of allindicieas
num_zeros_to_remove = floor(0.80 * length(all_indices_zero))
# next step, randomly eliminate 80% of your zeros
all_indices_zero= which(MyData['CBER'] <= 0.0)
length(all_indices_zero)
# randomselection of allindicieas
num_zeros_to_remove = floor(0.80 * length(all_indices_zero))
set.seed(123)
indices_to_remove = sample(all_indices_zero, num_zeros_to_remove)
MyData_filtered = MyData[-indices_to_remove, ]
dim(MyData_filtered)
new_indices_zero= which(MyData_filtered['CBER'] <= 0.0)
length(new_indices_zero)
summary(MyData_filtered)
summary(MyData)
plot(x= MyData_filtered$CBER, y = lm4.fit$residuals)
lm_filter.fit =lm(CBER ~ PhaseNoise + SymbolRate + SNR, data = MyData_filtered); summary(lm_filter.fit)
plot(x= MyData_filtered$CBER, y = lm_filter.fit$residuals)
abline(lm_filter.fit)
# plotting residuals
plot(x= MyData$CBER, y = lm4.fit$residuals)
abline(lm4.fit)
hist(unlist(MyData_filtered['CBER']), breaks = 100)
hist(unlist(MyData_filtered['CBER']), breaks = 1000)
hist(unlist(MyData_filtered['CBER']), breaks = 100)
hist(unlist(MyData_filtered['CBER']), breaks = 10)
hist(unlist(MyData_filtered['CBER']), breaks = 10000)
dim(MyData_filtered)
length(new_indices_zero)
new_indices_zero= which(MyData_filtered['CBER'] <= 0.0)
length(new_indices_zero)
total_rows = nrow(MyData_filtered)
num_zeros = length(new_indices_zero)
percent_zeros = (num_zeros / total_rows) * 100
num_non_zeros = total_rows - num_zeros
percent_non_zeros = (num_non_zeros / total_rows) * 100
# Print the results
cat("Percentage of data with CBER equal to 0:", percent_zeros, "%\n")
cat("Percentage of data with CBER greater than 0:", percent_non_zeros, "%\n")
hist(unlist(MyData_filtered['CBER']), breaks = 10000)
hist(unlist(MyData_filtered['CBER']), breaks = 1000)
hist(unlist(MyData_filtered['CBER']), breaks = 100)
all_indices_zero= which(MyData['CBER'] <= 0.0)
total_rows = nrow(MyData)
num_zeros = length(all_indices_zero)
percent_zeros = (num_zeros / total_rows) * 100
num_non_zeros = total_rows - num_zeros
percent_non_zeros = (num_non_zeros / total_rows) * 100
cat("Percentage of data with CBER equal to 0:", percent_zeros, "%\n")
cat("Percentage of data with CBER greater than 0:", percent_non_zeros, "%\n")
lm11.fit =lm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SNR, data = MyData); summary(lm11.fit)
plot(x= MyData$CBER, y = lm11.fit$residuals)
lm12.fit =lm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SymbolRate, data = MyData); summary(lm12.fit)
plot(x= MyData$CBER, y = lm12.fit$residuals)
lm13.fit =lm(CBER ~ PhaseNoise + SymbolRate + SNR + SNR*SNR, data = MyData); summary(lm13.fit)
plot(x= MyData$CBER, y = lm13.fit$residuals)
lm14.fit =lm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*PhaseNoise, data = MyData); summary(lm14.fit)
plot(x= MyData$CBER, y = lm14.fit$residuals)
lm15.fit =lm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SymbolRate, data = MyData); summary(lm15.fit)
plot(x= MyData$CBER, y = lm15.fit$residuals)
lm16.fit =lm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SymbolRate*SNR, data = MyData); summary(lm16.fit)
plot(x= MyData$CBER, y = lm16.fit$residuals)
lm10.fit =lm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SNR, data = MyData); summary(lm10.fit)
plot(x= MyData$CBER, y = lm10.fit$residuals)
summary(MyData_filtered)
hist(unlist(MyData_filtered['CBER']), breaks = 100)
lm_filter.fit =lm(CBER ~ PhaseNoise + SymbolRate + SNR, data = MyData_filtered); summary(lm_filter.fit)
plot(x= MyData_filtered$CBER, y = lm_filter.fit$residuals)
abline(lm_filter.fit)
plot(MyData$PhaseNoise, MyData$CBER)
lm15.fit =lm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SymbolRate, data = MyData); summary(lm15.fit)
plot(x= MyData$CBER, y = lm15.fit$residuals)
lm13.fit =lm(CBER ~ PhaseNoise + SymbolRate + SNR + SNR*SNR, data = MyData); summary(lm13.fit)
plot(x= MyData$CBER, y = lm13.fit$residuals)
lm14.fit =lm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*PhaseNoise, data = MyData); summary(lm14.fit)
plot(x= MyData$CBER, y = lm14.fit$residuals)
lm15.fit =lm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SymbolRate, data = MyData); summary(lm15.fit)
plot(x= MyData$CBER, y = lm15.fit$residuals)
# Try non-linear situations Path 1
lm5.fit =lm(CBER ~ log(PhaseNoise) + log(SymbolRate) + log(SNR), data = MyData); summary(lm4.fit)
# Try non-linear situations Path 1
lm5.fit =lm(CBER ~ log(PhaseNoise) + log(SymbolRate) + log(SNR), data = MyData); summary(lm4.fit)
log(3)
MyData = read.csv("full_Results.csv")
colnames(MyData)
summary(MyData)
plot(MyData$PhaseNoise, MyData$CBER)
lm1.fit =lm(MyData$CBER ~ MyData$PhaseNoise + MyData$SymbolRate); summary(lm1.fit)
lm2.fit =lm(MyData$CBER ~ MyData$PhaseNoise + MyData$SNR); summary(lm2.fit)
lm3.fit =lm(MyData$CBER ~ MyData$SNR + MyData$SymbolRate); summary(lm3.fit)
lm4.fit =lm(CBER ~ PhaseNoise + SymbolRate + SNR, data = MyData); summary(lm4.fit)
# Try non-linear situations Path 1
lm5.fit =lm(CBER ~ log(PhaseNoise) + log(SymbolRate) + log(SNR), data = MyData); summary(lm5.fit)
# Try non-linear situations Path 1
lm5.fit =lm(CBER ~ log(PhaseNoise+0.0001) + log(SymbolRate) + log(SNR+0.0001), data = MyData); summary(lm5.fit)
plot(x= MyData$CBER, y = lm5.fit$residuals)
exp(2)
# Try non-linear situations Path 1
lm5.fit =lm(CBER ~ PhaseNoise + exp(SymbolRate) + SNR, data = MyData); summary(lm5.fit)
# Try non-linear situations Path 1
lm5.fit =lm(CBER ~ PhaseNoise + SymbolRate^3 + SNR, data = MyData); summary(lm5.fit)
plot(x= MyData$CBER, y = lm5.fit$residuals)
lm5.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR, data = MyData); summary(lm5.fit)
plot(x= MyData$CBER, y = lm5.fit$residuals)
lm5.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR, data = MyData); summary(lm5.fit)
MyData = read.csv("full_Results.csv")
colnames(MyData)
summary(MyData)
all_indices_zero= which(MyData['CBER'] <= 0.005)
total_rows = nrow(MyData)
num_zeros = length(all_indices_zero)
percent_zeros = (num_zeros / total_rows) * 100
num_non_zeros = total_rows - num_zeros
percent_non_zeros = (num_non_zeros / total_rows) * 100
cat("Percentage of data with CBER equal to 0:", percent_zeros, "%\n")
cat("Percentage of data with CBER greater than 0:", percent_non_zeros, "%\n")
hist(unlist(MyData['CBER']), breaks = 1000)
hist(unlist(MyData['BER']), breaks = 50)
MyData_low_CBER = MyData[MyData$CBER < 0.005, ]
dim(MyData_low_CBER)
head(MyData_low_CBER)
summary(MyData_low_CBER)
lm9.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR, data = MyData_low_CBER); summary(lm9.fit)
plot(x= MyData_low_CBER$CBER, y = lm10.fit$residuals)
plot(x= MyData_low_CBER$CBER, y = lm9.fit$residuals)
lm10.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SNR, data = MyData_low_CBER); summary(lm10.fit)
plot(x= MyData_low_CBER$CBER, y = lm10.fit$residuals)
lm11.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SNR, data = MyData_low_CBER); summary(lm11.fit)
plot(x= MyData_low_CBER$CBER, y = lm11.fit$residuals)
lm12.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SymbolRate, data = MyData_low_CBER); summary(lm12.fit)
plot(x= MyData_low_CBER$CBER, y = lm12.fit$residuals)
lm13.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SNR*SNR, data = MyData_low_CBER); summary(lm13.fit)
plot(x= MyData_low_CBER$CBER, y = lm13.fit$residuals)
lm14.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*PhaseNoise, data = MyData); summary(lm14.fit)
plot(x= MyData_low_CBER$CBER, y = lm14.fit$residuals)
lm15.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SymbolRate, data = MyData); summary(lm15.fit)
plot(x= MyData_low_CBER$CBER, y = lm15.fit$residuals)
#high CBER
MyData_high_CBER = MyData[MyData$CBER > 0.02, ]
dim(MyData_high_CBER)
lm14.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*PhaseNoise, data = MyData_low_CBER); summary(lm14.fit)
plot(x= MyData_low_CBER$CBER, y = lm14.fit$residuals)
lm15.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SymbolRate, data = MyData_low_CBER); summary(lm15.fit)
plot(x= MyData_low_CBER$CBER, y = lm15.fit$residuals)
lm16.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SymbolRate*SNR, data = MyData_low_CBER); summary(lm16.fit)
plot(x= MyData_low_CBER$CBER, y = lm16.fit$residuals)
#high CBER
MyData_high_CBER = MyData[MyData$CBER > 0.02, ]
dim(MyData_high_CBER)
lm9.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR, data = MyData_high_CBER); summary(lm9.fit)
plot(x= MyData_high_CBER$CBER, y = lm9.fit$residuals)
lm10.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SNR, data = MyData_high_CBER); summary(lm10.fit)
plot(x= MyData_high_CBER$CBER, y = lm10.fit$residuals)
lm11.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SNR, data = MyData_high_CBER); summary(lm11.fit)
plot(x= MyData_high_CBER$CBER, y = lm11.fit$residuals)
lm12.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SymbolRate, data = MyData_high_CBER); summary(lm12.fit)
plot(x= MyData_high_CBER$CBER, y = lm12.fit$residuals)
lm13.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SNR*SNR, data = MyData_high_CBER); summary(lm13.fit)
plot(x= MyData_high_CBER$CBER, y = lm13.fit$residuals)
lm14.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*PhaseNoise, data = MyData_high_CBER); summary(lm14.fit)
plot(x= MyData_high_CBER$CBER, y = lm14.fit$residuals)
lm15.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SymbolRate, data = MyData_high_CBER); summary(lm15.fit)
plot(x= MyData_high_CBER$CBER, y = lm15.fit$residuals)
lm16.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SymbolRate*SNR, data = MyData_high_CBER); summary(lm16.fit)
plot(x= MyData_high_CBER$CBER, y = lm16.fit$residuals)
install.packages("caret")
library(caret)
# Use preProcess to normalize data between 0 and 1
preprocess_params <- preProcess(MyData_filtered, method = c("range"))
# Use preProcess to normalize data between 0 and 1
preprocess_params <- preProcess(MyData_filtered, method = c("range"))
# Apply normalization to the dataset
MyData_normalized <- predict(preprocess_params, MyData_filtered)
# Check the first few rows of the normalized dataset
head(MyData_normalized)
# Optionally, check the summary to verify normalization
summary(MyData_normalized)
#Normalized low CBER
MyData_normlow_CBER = MyData_normalized[MyData_normalized$CBER < 0.005, ]
dim(MyData_normlow_CBER)
#low CBER
MyData_low_CBER = MyData[MyData$CBER < 0.005, ]
dim(MyData_low_CBER)
#Normalized low CBER
MyData_normlow_CBER = MyData_normalized[MyData_normalized$CBER < 0.15, ]
dim(MyData_normlow_CBER)
#Normalized low CBER
MyData_normlow_CBER = MyData_normalized[MyData_normalized$CBER < 0.25, ]
dim(MyData_normlow_CBER)
head(MyData_normlow_CBER)
lm9.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR, data = MyData_normlow_CBER); summary(lm9.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm9.fit$residuals)
lm10.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SNR, data = MyData_normlow_CBER); summary(lm10.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm10.fit$residuals)
lm11.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SNR, data = MyData_normlow_CBER); summary(lm11.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm11.fit$residuals)
lm12.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SymbolRate, data = MyData_normlow_CBER); summary(lm12.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm12.fit$residuals)
lm13.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SNR*SNR, data = MyData_normlow_CBER); summary(lm13.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm13.fit$residuals)
lm14.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*PhaseNoise, data = MyData_normlow_CBER); summary(lm14.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm14.fit$residuals)
lm15.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SymbolRate, data = MyData_normlow_CBER); summary(lm15.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm15.fit$residuals)
lm16.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SymbolRate*SNR, data = MyData_normlow_CBER); summary(lm16.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm16.fit$residuals)
all_indices_zero= which(MyData['CBER'] <= 0.005)
lm9.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR, data = MyData_normlow_CBER); summary(lm9.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm9.fit$residuals)
lm10.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SNR, data = MyData_normlow_CBER); summary(lm10.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm10.fit$residuals)
lm11.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SNR, data = MyData_normlow_CBER); summary(lm11.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm11.fit$residuals)
lm12.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SymbolRate, data = MyData_normlow_CBER); summary(lm12.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm12.fit$residuals)
lm13.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SNR*SNR, data = MyData_normlow_CBER); summary(lm13.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm13.fit$residuals)
lm14.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*PhaseNoise, data = MyData_normlow_CBER); summary(lm14.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm14.fit$residuals)
lm15.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SymbolRate, data = MyData_normlow_CBER); summary(lm15.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm15.fit$residuals)
lm16.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SymbolRate*SNR, data = MyData_normlow_CBER); summary(lm16.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm16.fit$residuals)
#Normalized low CBER
MyData_normlow_CBER = MyData_normalized[MyData_normalized$CBER < 0.15, ]
lm9.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR, data = MyData_normlow_CBER); summary(lm9.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm9.fit$residuals)
lm10.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SNR, data = MyData_normlow_CBER); summary(lm10.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm10.fit$residuals)
lm11.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SNR, data = MyData_normlow_CBER); summary(lm11.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm11.fit$residuals)
lm12.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SymbolRate, data = MyData_normlow_CBER); summary(lm12.fit)
summary(MyData_normalized)
#Normalized low CBER
MyData_normlow_CBER = MyData_normalized[MyData_normalized$CBER < 0.15, ]
dim(MyData_normlow_CBER)
head(MyData_normlow_CBER)
summary(MyData_normlow_CBER)
lm9.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR, data = MyData_normlow_CBER); summary(lm9.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm9.fit$residuals)
lm10.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SNR, data = MyData_normlow_CBER); summary(lm10.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm10.fit$residuals)
lm11.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SNR, data = MyData_normlow_CBER); summary(lm11.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm11.fit$residuals)
lm12.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SymbolRate, data = MyData_normlow_CBER); summary(lm12.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm12.fit$residuals)
lm13.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SNR*SNR, data = MyData_normlow_CBER); summary(lm13.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm13.fit$residuals)
lm14.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*PhaseNoise, data = MyData_normlow_CBER); summary(lm14.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm14.fit$residuals)
lm15.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SymbolRate, data = MyData_normlow_CBER); summary(lm15.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm15.fit$residuals)
lm16.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SymbolRate*SNR, data = MyData_normlow_CBER); summary(lm16.fit)
plot(x= MyData_normlow_CBER$CBER, y = lm16.fit$residuals)
#Normalized high CBER
MyData_normh_CBER = MyData_normalized[MyData_normalized$CBER < 0.15, ]
#Normalized high CBER
MyData_normh_CBER = MyData_normalized[MyData_normalized$CBER > 0.65, ]
dim(MyData_normh_CBER)
head(MyData_normh_CBER)
summary(MyData_normh_CBER)
lm9.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR, data = MyData_normh_CBER); summary(lm9.fit)
plot(x= MyData_normh_CBER$CBER, y = lm9.fit$residuals)
lm10.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SNR, data = MyData_normh_CBER); summary(lm10.fit)
plot(x= MyData_normh_CBER$CBER, y = lm10.fit$residuals)
lm11.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SNR, data = MyData_normh_CBER); summary(lm11.fit)
plot(x= MyData_normh_CBER$CBER, y = lm11.fit$residuals)
lm12.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SymbolRate, data = MyData_normh_CBER); summary(lm12.fit)
plot(x= MyData_normh_CBER$CBER, y = lm12.fit$residuals)
lm13.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SNR*SNR, data = MyData_normh_CBER); summary(lm13.fit)
plot(x= MyData_normh_CBER$CBER, y = lm13.fit$residuals)
lm14.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*PhaseNoise, data = MyData_normh_CBER); summary(lm14.fit)
plot(x= MyData_normh_CBER$CBER, y = lm14.fit$residuals)
lm15.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + SymbolRate*SymbolRate, data = MyData_normh_CBER); summary(lm15.fit)
plot(x= MyData_normh_CBER$CBER, y = lm15.fit$residuals)
lm16.fit =glm(CBER ~ PhaseNoise + SymbolRate + SNR + PhaseNoise*SymbolRate*SNR, data = MyData_normh_CBER); summary(lm16.fit)
plot(x= MyData_normh_CBER$CBER, y = lm16.fit$residuals)
